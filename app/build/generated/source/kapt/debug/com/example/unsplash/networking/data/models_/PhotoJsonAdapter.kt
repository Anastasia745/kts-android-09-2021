// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.unsplash.networking.`data`.models_

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PhotoJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Photo>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "alt_description", "urls",
      "likes", "liked_by_user")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "likes")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "likedByUser")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Photo").append(')') }

  public override fun fromJson(reader: JsonReader): Photo {
    var id: String? = null
    var alt_description: String? = null
    var urls: String? = null
    var likes: Int? = null
    var likedByUser: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> alt_description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("alt_description", "alt_description", reader)
        2 -> urls = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("urls", "urls",
            reader)
        3 -> likes = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("likes", "likes",
            reader)
        4 -> likedByUser = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("likedByUser", "liked_by_user", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Photo(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        alt_description = alt_description ?: throw Util.missingProperty("alt_description",
            "alt_description", reader),
        urls = urls ?: throw Util.missingProperty("urls", "urls", reader),
        likes = likes ?: throw Util.missingProperty("likes", "likes", reader),
        likedByUser = likedByUser ?: throw Util.missingProperty("likedByUser", "liked_by_user",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Photo?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("alt_description")
    stringAdapter.toJson(writer, value_.alt_description)
    writer.name("urls")
    stringAdapter.toJson(writer, value_.urls)
    writer.name("likes")
    intAdapter.toJson(writer, value_.likes)
    writer.name("liked_by_user")
    booleanAdapter.toJson(writer, value_.likedByUser)
    writer.endObject()
  }
}
